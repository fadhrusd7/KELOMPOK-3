import cv2
import numpy as np

# Fungsi callback untuk trackbar (tidak melakukan apa-apa)
def nothing(x):
    pass

# Fungsi untuk membuat trackbar
def create_trackbars():
    cv2.namedWindow('Trackbars', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('Trackbars', 600, 400)

    # Trackbar untuk warna merah
    cv2.createTrackbar('RL H1', 'Trackbars', 0, 180, nothing)  # Red Lower Hue 1
    cv2.createTrackbar('RU H1', 'Trackbars', 10, 180, nothing) # Red Upper Hue 1
    cv2.createTrackbar('RL H2', 'Trackbars', 170, 180, nothing) # Red Lower Hue 2
    cv2.createTrackbar('RU H2', 'Trackbars', 180, 180, nothing) # Red Upper Hue 2
    cv2.createTrackbar('RL S', 'Trackbars', 100, 255, nothing) # Red Lower Saturation
    cv2.createTrackbar('RU S', 'Trackbars', 255, 255, nothing) # Red Upper Saturation
    cv2.createTrackbar('RL V', 'Trackbars', 100, 255, nothing)  # Red Lower Value
    cv2.createTrackbar('RU V', 'Trackbars', 255, 255, nothing) # Red Upper Value

    # Trackbar untuk warna hijau
    cv2.createTrackbar('GL H', 'Trackbars', 35, 180, nothing)  # Green Lower Hue
    cv2.createTrackbar('GU H', 'Trackbars', 85, 180, nothing)  # Green Upper Hue
    cv2.createTrackbar('GL S', 'Trackbars', 100, 255, nothing)  # Green Lower Saturation
    cv2.createTrackbar('GU S', 'Trackbars', 255, 255, nothing) # Green Upper Saturation
    cv2.createTrackbar('GL V', 'Trackbars', 100, 255, nothing)  # Green Lower Value
    cv2.createTrackbar('GU V', 'Trackbars', 255, 255, nothing) # Green Upper Value

# Fungsi untuk mendapatkan nilai dari trackbar
def get_trackbar_values():
    # Warna merah
    rl_h1 = cv2.getTrackbarPos('RL H1', 'Trackbars')
    ru_h1 = cv2.getTrackbarPos('RU H1', 'Trackbars')
    rl_h2 = cv2.getTrackbarPos('RL H2', 'Trackbars')
    ru_h2 = cv2.getTrackbarPos('RU H2', 'Trackbars')
    rl_s = cv2.getTrackbarPos('RL S', 'Trackbars')
    ru_s = cv2.getTrackbarPos('RU S', 'Trackbars')
    rl_v = cv2.getTrackbarPos('RL V', 'Trackbars')
    ru_v = cv2.getTrackbarPos('RU V', 'Trackbars')

    # Warna hijau
    gl_h = cv2.getTrackbarPos('GL H', 'Trackbars')
    gu_h = cv2.getTrackbarPos('GU H', 'Trackbars')
    gl_s = cv2.getTrackbarPos('GL S', 'Trackbars')
    gu_s = cv2.getTrackbarPos('GU S', 'Trackbars')
    gl_v = cv2.getTrackbarPos('GL V', 'Trackbars')
    gu_v = cv2.getTrackbarPos('GU V', 'Trackbars')

    return {
        "red1": (np.array([rl_h1, rl_s, rl_v]), np.array([ru_h1, ru_s, ru_v])),
        "red2": (np.array([rl_h2, rl_s, rl_v]), np.array([ru_h2, ru_s, ru_v])),
        "green": (np.array([gl_h, gl_s, gl_v]), np.array([gu_h, gu_s, gu_v])),
    }

# Membuat trackbar
create_trackbars()

# Membuka video
cam = cv2.VideoCapture("tesvideo.mp4")
if not cam.isOpened():
    print("Error: Tidak dapat membuka video")
    exit()

# Membaca frame pertama untuk pemilihan ROI
ret, frame = cam.read()
if not ret:
    print("Error: Tidak ada frame")
    exit()

# Pilih ROI menggunakan mouse
roi = cv2.selectROI('Pilih ROI', frame, fromCenter=False, showCrosshair=True)

# Tutup jendela ROI secara otomatis setelah mouse dilepas
cv2.destroyWindow('Pilih ROI')

# ROI yang dipilih
x, y, w, h = roi
print(f"ROI yang dipilih: x={x}, y={y}, width={w}, height={h}")



# Loop utama
while True:
    ret, frame = cam.read()
    if not ret:
        break

    # Potong frame ke ROI
    roi_frame = frame[y:y+h, x:x+w]

    # Konversi ke HSV
    hsv_frame = cv2.cvtColor(roi_frame, cv2.COLOR_BGR2HSV)

    # Dapatkan nilai trackbar
    trackbar_values = get_trackbar_values()

    # Masking warna
    mask_red1 = cv2.inRange(hsv_frame, *trackbar_values["red1"])
    mask_red2 = cv2.inRange(hsv_frame, *trackbar_values["red2"])
    mask_red = cv2.bitwise_or(mask_red1, mask_red2)

    mask_green = cv2.inRange(hsv_frame, *trackbar_values["green"])
    combined_mask = cv2.bitwise_or(mask_red, mask_green)

    # Terapkan mask
    result = cv2.bitwise_and(roi_frame, roi_frame, mask=combined_mask)
    
    # Menggunakan kernel berbentuk lingkaran untuk operasi morfologi
    kernel_circle = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    
    # Erode dan dilate dengan kernel lingkaran
    mask_red = cv2.erode(mask_red, kernel_circle, iterations=1)
    mask_green = cv2.erode(mask_green, kernel_circle, iterations=1)
    combined_mask = cv2.erode(combined_mask, kernel_circle, iterations=1)

    mask_red = cv2.dilate(mask_red, kernel_circle, iterations=1)
    mask_green = cv2.dilate(mask_green, kernel_circle, iterations=1)
    combined_mask = cv2.dilate(combined_mask, kernel_circle, iterations=1)
    
    # Tambahkan kontur pada mask merah dan hijau
    contours_red, _ = cv2.findContours(mask_red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours_green, _ = cv2.findContours(mask_green, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    cv2.drawContours(result, contours_red, -1, (0, 0, 255), 2)
    cv2.drawContours(result, contours_green, -1, (0, 255, 0), 2)
    
    # Menghitung bola menggunakan grabContours dan contourArea
    if contours_red:
        c_red = max(contours_red, key=cv2.contourArea)
        ((x_red, y_red), radius_red) = cv2.minEnclosingCircle(c_red)
        if radius_red > 10:  # Hanya gambar lingkaran jika radius lebih besar dari 10 piksel
            cv2.circle(result, (int(x_red), int(y_red)), int(radius_red), (0, 0, 255), 2)

    if contours_green:
        c_green = max(contours_green, key=cv2.contourArea)
        ((x_green, y_green), radius_green) = cv2.minEnclosingCircle(c_green)
        if radius_green > 10:  # Hanya gambar lingkaran jika radius lebih besar dari 10 piksel
            cv2.circle(result, (int(x_green), int(y_green)), int(radius_green), (0, 255, 0), 2)
    
   

    # Tampilkan hasil
    cv2.imshow('ROI', roi_frame)
    cv2.imshow('Mask Gabungan', combined_mask)
    cv2.imshow('Hasil Masking', result)

    # Tekan 'q' untuk keluar
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Bersihkan
cam.release()
cv2.destroyAllWindows()

